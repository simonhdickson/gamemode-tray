// This code was autogenerated with `dbus-codegen-rust -m None -d com.feralinteractive.GameMode -p /com/feralinteractive/GameMode`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusPeer
    for blocking::Proxy<'a, C>
{
    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C>
{
    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get(
        &self,
        interface: &str,
        property: &str,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set(
        &self,
        interface: &str,
        property: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusProperties
    for blocking::Proxy<'a, C>
{
    fn get(
        &self,
        interface: &str,
        property: &str,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Get",
            (interface, property),
        )
        .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>,)| Ok(r.0))
    }

    fn get_all(&self, interface: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface,))
            .and_then(|r: (arg::PropMap,)| Ok(r.0))
    }

    fn set(
        &self,
        interface: &str,
        property: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Set",
            (interface, property, value),
        )
    }
}

pub trait ComFeralinteractiveGameMode {
    fn register_game(&self, arg0: i32) -> Result<i32, dbus::Error>;
    fn unregister_game(&self, arg0: i32) -> Result<i32, dbus::Error>;
    fn query_status(&self, arg0: i32) -> Result<i32, dbus::Error>;
    fn register_game_by_pid(&self, arg0: i32, arg1: i32) -> Result<i32, dbus::Error>;
    fn unregister_game_by_pid(&self, arg0: i32, arg1: i32) -> Result<i32, dbus::Error>;
    fn query_status_by_pid(&self, arg0: i32, arg1: i32) -> Result<i32, dbus::Error>;
    fn register_game_by_pidfd(
        &self,
        arg0: arg::OwnedFd,
        arg1: arg::OwnedFd,
    ) -> Result<i32, dbus::Error>;
    fn unregister_game_by_pidfd(
        &self,
        arg0: arg::OwnedFd,
        arg1: arg::OwnedFd,
    ) -> Result<i32, dbus::Error>;
    fn query_status_by_pidfd(
        &self,
        arg0: arg::OwnedFd,
        arg1: arg::OwnedFd,
    ) -> Result<i32, dbus::Error>;
    fn refresh_config(&self) -> Result<i32, dbus::Error>;
    fn list_games(&self) -> Result<Vec<(i32, dbus::Path<'static>)>, dbus::Error>;
    fn client_count(&self) -> Result<i32, dbus::Error>;
}

#[derive(Debug)]
pub struct ComFeralinteractiveGameModeGameRegistered {
    pub arg0: i32,
    pub arg1: dbus::Path<'static>,
}

impl arg::AppendAll for ComFeralinteractiveGameModeGameRegistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
        arg::RefArg::append(&self.arg1, i);
    }
}

impl arg::ReadAll for ComFeralinteractiveGameModeGameRegistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ComFeralinteractiveGameModeGameRegistered {
            arg0: i.read()?,
            arg1: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ComFeralinteractiveGameModeGameRegistered {
    const NAME: &'static str = "GameRegistered";
    const INTERFACE: &'static str = "com.feralinteractive.GameMode";
}

#[derive(Debug)]
pub struct ComFeralinteractiveGameModeGameUnregistered {
    pub arg0: i32,
    pub arg1: dbus::Path<'static>,
}

impl arg::AppendAll for ComFeralinteractiveGameModeGameUnregistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
        arg::RefArg::append(&self.arg1, i);
    }
}

impl arg::ReadAll for ComFeralinteractiveGameModeGameUnregistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ComFeralinteractiveGameModeGameUnregistered {
            arg0: i.read()?,
            arg1: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ComFeralinteractiveGameModeGameUnregistered {
    const NAME: &'static str = "GameUnregistered";
    const INTERFACE: &'static str = "com.feralinteractive.GameMode";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> ComFeralinteractiveGameMode
    for blocking::Proxy<'a, C>
{
    fn register_game(&self, arg0: i32) -> Result<i32, dbus::Error> {
        self.method_call("com.feralinteractive.GameMode", "RegisterGame", (arg0,))
            .and_then(|r: (i32,)| Ok(r.0))
    }

    fn unregister_game(&self, arg0: i32) -> Result<i32, dbus::Error> {
        self.method_call("com.feralinteractive.GameMode", "UnregisterGame", (arg0,))
            .and_then(|r: (i32,)| Ok(r.0))
    }

    fn query_status(&self, arg0: i32) -> Result<i32, dbus::Error> {
        self.method_call("com.feralinteractive.GameMode", "QueryStatus", (arg0,))
            .and_then(|r: (i32,)| Ok(r.0))
    }

    fn register_game_by_pid(&self, arg0: i32, arg1: i32) -> Result<i32, dbus::Error> {
        self.method_call(
            "com.feralinteractive.GameMode",
            "RegisterGameByPID",
            (arg0, arg1),
        )
        .and_then(|r: (i32,)| Ok(r.0))
    }

    fn unregister_game_by_pid(&self, arg0: i32, arg1: i32) -> Result<i32, dbus::Error> {
        self.method_call(
            "com.feralinteractive.GameMode",
            "UnregisterGameByPID",
            (arg0, arg1),
        )
        .and_then(|r: (i32,)| Ok(r.0))
    }

    fn query_status_by_pid(&self, arg0: i32, arg1: i32) -> Result<i32, dbus::Error> {
        self.method_call(
            "com.feralinteractive.GameMode",
            "QueryStatusByPID",
            (arg0, arg1),
        )
        .and_then(|r: (i32,)| Ok(r.0))
    }

    fn register_game_by_pidfd(
        &self,
        arg0: arg::OwnedFd,
        arg1: arg::OwnedFd,
    ) -> Result<i32, dbus::Error> {
        self.method_call(
            "com.feralinteractive.GameMode",
            "RegisterGameByPIDFd",
            (arg0, arg1),
        )
        .and_then(|r: (i32,)| Ok(r.0))
    }

    fn unregister_game_by_pidfd(
        &self,
        arg0: arg::OwnedFd,
        arg1: arg::OwnedFd,
    ) -> Result<i32, dbus::Error> {
        self.method_call(
            "com.feralinteractive.GameMode",
            "UnregisterGameByPIDFd",
            (arg0, arg1),
        )
        .and_then(|r: (i32,)| Ok(r.0))
    }

    fn query_status_by_pidfd(
        &self,
        arg0: arg::OwnedFd,
        arg1: arg::OwnedFd,
    ) -> Result<i32, dbus::Error> {
        self.method_call(
            "com.feralinteractive.GameMode",
            "QueryStatusByPIDFd",
            (arg0, arg1),
        )
        .and_then(|r: (i32,)| Ok(r.0))
    }

    fn refresh_config(&self) -> Result<i32, dbus::Error> {
        self.method_call("com.feralinteractive.GameMode", "RefreshConfig", ())
            .and_then(|r: (i32,)| Ok(r.0))
    }

    fn list_games(&self) -> Result<Vec<(i32, dbus::Path<'static>)>, dbus::Error> {
        self.method_call("com.feralinteractive.GameMode", "ListGames", ())
            .and_then(|r: (Vec<(i32, dbus::Path<'static>)>,)| Ok(r.0))
    }

    fn client_count(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.feralinteractive.GameMode",
            "ClientCount",
        )
    }
}
